"use strict";(self.webpackChunk_arizeai_point_cloud=self.webpackChunk_arizeai_point_cloud||[]).push([[874],{"./node_modules/@react-three/drei/core/QuadraticBezierLine.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{m:()=>QuadraticBezierLine});var esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),react=__webpack_require__("./node_modules/react/index.js"),three_module=__webpack_require__("./node_modules/three/build/three.module.js"),index_76c68185_esm=__webpack_require__("./node_modules/@react-three/fiber/dist/index-76c68185.esm.js");const _box=new three_module.Box3,_vector=new three_module.Vector3;class LineSegmentsGeometry extends three_module.InstancedBufferGeometry{constructor(){super(),this.isLineSegmentsGeometry=!0,this.type="LineSegmentsGeometry";this.setIndex([0,2,1,2,3,1,2,4,3,4,5,3,4,6,5,6,7,5]),this.setAttribute("position",new three_module.Float32BufferAttribute([-1,2,0,1,2,0,-1,1,0,1,1,0,-1,0,0,1,0,0,-1,-1,0,1,-1,0],3)),this.setAttribute("uv",new three_module.Float32BufferAttribute([-1,2,1,2,-1,1,1,1,-1,-1,1,-1,-1,-2,1,-2],2))}applyMatrix4(matrix){const start=this.attributes.instanceStart,end=this.attributes.instanceEnd;return void 0!==start&&(start.applyMatrix4(matrix),end.applyMatrix4(matrix),start.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}setPositions(array){let lineSegments;array instanceof Float32Array?lineSegments=array:Array.isArray(array)&&(lineSegments=new Float32Array(array));const instanceBuffer=new three_module.InstancedInterleavedBuffer(lineSegments,6,1);return this.setAttribute("instanceStart",new three_module.InterleavedBufferAttribute(instanceBuffer,3,0)),this.setAttribute("instanceEnd",new three_module.InterleavedBufferAttribute(instanceBuffer,3,3)),this.computeBoundingBox(),this.computeBoundingSphere(),this}setColors(array,itemSize=3){let colors;array instanceof Float32Array?colors=array:Array.isArray(array)&&(colors=new Float32Array(array));const instanceColorBuffer=new three_module.InstancedInterleavedBuffer(colors,2*itemSize,1);return this.setAttribute("instanceColorStart",new three_module.InterleavedBufferAttribute(instanceColorBuffer,itemSize,0)),this.setAttribute("instanceColorEnd",new three_module.InterleavedBufferAttribute(instanceColorBuffer,itemSize,itemSize)),this}fromWireframeGeometry(geometry){return this.setPositions(geometry.attributes.position.array),this}fromEdgesGeometry(geometry){return this.setPositions(geometry.attributes.position.array),this}fromMesh(mesh){return this.fromWireframeGeometry(new three_module.WireframeGeometry(mesh.geometry)),this}fromLineSegments(lineSegments){const geometry=lineSegments.geometry;return this.setPositions(geometry.attributes.position.array),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new three_module.Box3);const start=this.attributes.instanceStart,end=this.attributes.instanceEnd;void 0!==start&&void 0!==end&&(this.boundingBox.setFromBufferAttribute(start),_box.setFromBufferAttribute(end),this.boundingBox.union(_box))}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new three_module.Sphere),null===this.boundingBox&&this.computeBoundingBox();const start=this.attributes.instanceStart,end=this.attributes.instanceEnd;if(void 0!==start&&void 0!==end){const center=this.boundingSphere.center;this.boundingBox.getCenter(center);let maxRadiusSq=0;for(let i=0,il=start.count;i<il;i++)_vector.fromBufferAttribute(start,i),maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(_vector)),_vector.fromBufferAttribute(end,i),maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(_vector));this.boundingSphere.radius=Math.sqrt(maxRadiusSq),isNaN(this.boundingSphere.radius)&&console.error("THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.",this)}}toJSON(){}applyMatrix(matrix){return console.warn("THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4()."),this.applyMatrix4(matrix)}}class LineMaterial extends three_module.ShaderMaterial{constructor(parameters){super({type:"LineMaterial",uniforms:three_module.UniformsUtils.clone(three_module.UniformsUtils.merge([three_module.UniformsLib.common,three_module.UniformsLib.fog,{worldUnits:{value:1},linewidth:{value:1},resolution:{value:new three_module.Vector2(1,1)},dashOffset:{value:0},dashScale:{value:1},dashSize:{value:1},gapSize:{value:1}}])),vertexShader:"\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\t\t\t\t#include <clipping_planes_pars_vertex>\n\n\t\t\t\tuniform float linewidth;\n\t\t\t\tuniform vec2 resolution;\n\n\t\t\t\tattribute vec3 instanceStart;\n\t\t\t\tattribute vec3 instanceEnd;\n\n\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\tvarying vec4 vLineColor;\n\t\t\t\t\t\tattribute vec4 instanceColorStart;\n\t\t\t\t\t\tattribute vec4 instanceColorEnd;\n\t\t\t\t\t#else\n\t\t\t\t\t\tvarying vec3 vLineColor;\n\t\t\t\t\t\tattribute vec3 instanceColorStart;\n\t\t\t\t\t\tattribute vec3 instanceColorEnd;\n\t\t\t\t\t#endif\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\tvarying vec4 worldPos;\n\t\t\t\t\tvarying vec3 worldStart;\n\t\t\t\t\tvarying vec3 worldEnd;\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#else\n\n\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\tuniform float dashScale;\n\t\t\t\t\tattribute float instanceDistanceStart;\n\t\t\t\t\tattribute float instanceDistanceEnd;\n\t\t\t\t\tvarying float vLineDistance;\n\n\t\t\t\t#endif\n\n\t\t\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t\t\t// conservative estimate of the near plane\n\t\t\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#ifdef USE_COLOR\n\n\t\t\t\t\t\tvLineColor = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\t\t\t\t\t\tvUv = uv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\t\t\t// camera space\n\t\t\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\tworldStart = start.xyz;\n\t\t\t\t\t\tworldEnd = end.xyz;\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tvUv = uv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\t\t\tif ( perspective ) {\n\n\t\t\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// clip space\n\t\t\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t\t\t// ndc space\n\t\t\t\t\tvec3 ndcStart = clipStart.xyz / clipStart.w;\n\t\t\t\t\tvec3 ndcEnd = clipEnd.xyz / clipEnd.w;\n\n\t\t\t\t\t// direction\n\t\t\t\t\tvec2 dir = ndcEnd.xy - ndcStart.xy;\n\n\t\t\t\t\t// account for clip-space aspect ratio\n\t\t\t\t\tdir.x *= aspect;\n\t\t\t\t\tdir = normalize( dir );\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\t// get the offset direction as perpendicular to the view vector\n\t\t\t\t\t\tvec3 worldDir = normalize( end.xyz - start.xyz );\n\t\t\t\t\t\tvec3 offset;\n\t\t\t\t\t\tif ( position.y < 0.5 ) {\n\n\t\t\t\t\t\t\toffset = normalize( cross( start.xyz, worldDir ) );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\toffset = normalize( cross( end.xyz, worldDir ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// sign flip\n\t\t\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t\t\tfloat forwardOffset = dot( worldDir, vec3( 0.0, 0.0, 1.0 ) );\n\n\t\t\t\t\t\t// don't extend the line if we're rendering dashes because we\n\t\t\t\t\t\t// won't be rendering the endcaps\n\t\t\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t\t\t// extend the line bounds to encompass  endcaps\n\t\t\t\t\t\t\tstart.xyz += - worldDir * linewidth * 0.5;\n\t\t\t\t\t\t\tend.xyz += worldDir * linewidth * 0.5;\n\n\t\t\t\t\t\t\t// shift the position of the quad so it hugs the forward edge of the line\n\t\t\t\t\t\t\toffset.xy -= dir * forwardOffset;\n\t\t\t\t\t\t\toffset.z += 0.5;\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// endcaps\n\t\t\t\t\t\tif ( position.y > 1.0 || position.y < 0.0 ) {\n\n\t\t\t\t\t\t\toffset.xy += dir * 2.0 * forwardOffset;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// adjust for linewidth\n\t\t\t\t\t\toffset *= linewidth * 0.5;\n\n\t\t\t\t\t\t// set the world position\n\t\t\t\t\t\tworldPos = ( position.y < 0.5 ) ? start : end;\n\t\t\t\t\t\tworldPos.xyz += offset;\n\n\t\t\t\t\t\t// project the worldpos\n\t\t\t\t\t\tvec4 clip = projectionMatrix * worldPos;\n\n\t\t\t\t\t\t// shift the depth of the projected points so the line\n\t\t\t\t\t\t// segments overlap neatly\n\t\t\t\t\t\tvec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;\n\t\t\t\t\t\tclip.z = clipPose.z * clip.w;\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\t\t\t\t\t\t// undo aspect ratio adjustment\n\t\t\t\t\t\tdir.x /= aspect;\n\t\t\t\t\t\toffset.x /= aspect;\n\n\t\t\t\t\t\t// sign flip\n\t\t\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t\t\t// endcaps\n\t\t\t\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\t\t\t\toffset += - dir;\n\n\t\t\t\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\t\t\t\toffset += dir;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// adjust for linewidth\n\t\t\t\t\t\toffset *= linewidth;\n\n\t\t\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\t\t\t\toffset /= resolution.y;\n\n\t\t\t\t\t\t// select end\n\t\t\t\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t\t\t\t// back to clip space\n\t\t\t\t\t\toffset *= clip.w;\n\n\t\t\t\t\t\tclip.xy += offset;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tgl_Position = clip;\n\n\t\t\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t\t#include <clipping_planes_vertex>\n\t\t\t\t\t#include <fog_vertex>\n\n\t\t\t\t}\n\t\t\t",fragmentShader:`\n\t\t\t\tuniform vec3 diffuse;\n\t\t\t\tuniform float opacity;\n\t\t\t\tuniform float linewidth;\n\n\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\tuniform float dashOffset;\n\t\t\t\t\tuniform float dashSize;\n\t\t\t\t\tuniform float gapSize;\n\n\t\t\t\t#endif\n\n\t\t\t\tvarying float vLineDistance;\n\n\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\tvarying vec4 worldPos;\n\t\t\t\t\tvarying vec3 worldStart;\n\t\t\t\t\tvarying vec3 worldEnd;\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#else\n\n\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#endif\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <clipping_planes_pars_fragment>\n\n\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\tvarying vec4 vLineColor;\n\t\t\t\t\t#else\n\t\t\t\t\t\tvarying vec3 vLineColor;\n\t\t\t\t\t#endif\n\t\t\t\t#endif\n\n\t\t\t\tvec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\n\n\t\t\t\t\tfloat mua;\n\t\t\t\t\tfloat mub;\n\n\t\t\t\t\tvec3 p13 = p1 - p3;\n\t\t\t\t\tvec3 p43 = p4 - p3;\n\n\t\t\t\t\tvec3 p21 = p2 - p1;\n\n\t\t\t\t\tfloat d1343 = dot( p13, p43 );\n\t\t\t\t\tfloat d4321 = dot( p43, p21 );\n\t\t\t\t\tfloat d1321 = dot( p13, p21 );\n\t\t\t\t\tfloat d4343 = dot( p43, p43 );\n\t\t\t\t\tfloat d2121 = dot( p21, p21 );\n\n\t\t\t\t\tfloat denom = d2121 * d4343 - d4321 * d4321;\n\n\t\t\t\t\tfloat numer = d1343 * d4321 - d1321 * d4343;\n\n\t\t\t\t\tmua = numer / denom;\n\t\t\t\t\tmua = clamp( mua, 0.0, 1.0 );\n\t\t\t\t\tmub = ( d1343 + d4321 * ( mua ) ) / d4343;\n\t\t\t\t\tmub = clamp( mub, 0.0, 1.0 );\n\n\t\t\t\t\treturn vec2( mua, mub );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\t\t\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tfloat alpha = opacity;\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\t// Find the closest points on the view ray and the line segment\n\t\t\t\t\t\tvec3 rayEnd = normalize( worldPos.xyz ) * 1e5;\n\t\t\t\t\t\tvec3 lineDir = worldEnd - worldStart;\n\t\t\t\t\t\tvec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );\n\n\t\t\t\t\t\tvec3 p1 = worldStart + lineDir * params.x;\n\t\t\t\t\t\tvec3 p2 = rayEnd * params.y;\n\t\t\t\t\t\tvec3 delta = p1 - p2;\n\t\t\t\t\t\tfloat len = length( delta );\n\t\t\t\t\t\tfloat norm = len / linewidth;\n\n\t\t\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\t\t\tfloat dnorm = fwidth( norm );\n\t\t\t\t\t\t\t\talpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );\n\n\t\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\t\tif ( norm > 0.5 ) {\n\n\t\t\t\t\t\t\t\t\tdiscard;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\t\t// artifacts appear on some hardware if a derivative is taken within a conditional\n\t\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\t\t\t\t\t\t\tfloat dlen = fwidth( len2 );\n\n\t\t\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\t\t\talpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\t\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tvec4 diffuseColor = vec4( diffuse, alpha );\n\t\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\t\tdiffuseColor *= vLineColor;\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tdiffuseColor.rgb *= vLineColor;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\t\t\tgl_FragColor = diffuseColor;\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <${parseInt(three_module.REVISION.replace(/\D+/g,""))>=154?"colorspace_fragment":"encodings_fragment"}>\n\t\t\t\t\t#include <fog_fragment>\n\t\t\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t\t\t}\n\t\t\t`,clipping:!0}),this.isLineMaterial=!0,this.onBeforeCompile=function(){this.transparent?this.defines.USE_LINE_COLOR_ALPHA="1":delete this.defines.USE_LINE_COLOR_ALPHA},Object.defineProperties(this,{color:{enumerable:!0,get:function(){return this.uniforms.diffuse.value},set:function(value){this.uniforms.diffuse.value=value}},worldUnits:{enumerable:!0,get:function(){return"WORLD_UNITS"in this.defines},set:function(value){!0===value?this.defines.WORLD_UNITS="":delete this.defines.WORLD_UNITS}},linewidth:{enumerable:!0,get:function(){return this.uniforms.linewidth.value},set:function(value){this.uniforms.linewidth.value=value}},dashed:{enumerable:!0,get:function(){return Boolean("USE_DASH"in this.defines)},set(value){Boolean(value)!==Boolean("USE_DASH"in this.defines)&&(this.needsUpdate=!0),!0===value?this.defines.USE_DASH="":delete this.defines.USE_DASH}},dashScale:{enumerable:!0,get:function(){return this.uniforms.dashScale.value},set:function(value){this.uniforms.dashScale.value=value}},dashSize:{enumerable:!0,get:function(){return this.uniforms.dashSize.value},set:function(value){this.uniforms.dashSize.value=value}},dashOffset:{enumerable:!0,get:function(){return this.uniforms.dashOffset.value},set:function(value){this.uniforms.dashOffset.value=value}},gapSize:{enumerable:!0,get:function(){return this.uniforms.gapSize.value},set:function(value){this.uniforms.gapSize.value=value}},opacity:{enumerable:!0,get:function(){return this.uniforms.opacity.value},set:function(value){this.uniforms.opacity.value=value}},resolution:{enumerable:!0,get:function(){return this.uniforms.resolution.value},set:function(value){this.uniforms.resolution.value.copy(value)}},alphaToCoverage:{enumerable:!0,get:function(){return Boolean("USE_ALPHA_TO_COVERAGE"in this.defines)},set:function(value){Boolean(value)!==Boolean("USE_ALPHA_TO_COVERAGE"in this.defines)&&(this.needsUpdate=!0),!0===value?(this.defines.USE_ALPHA_TO_COVERAGE="",this.extensions.derivatives=!0):(delete this.defines.USE_ALPHA_TO_COVERAGE,this.extensions.derivatives=!1)}}}),this.setValues(parameters)}}const _start=new three_module.Vector3,_end=new three_module.Vector3,_start4=new three_module.Vector4,_end4=new three_module.Vector4,_ssOrigin=new three_module.Vector4,_ssOrigin3=new three_module.Vector3,_mvMatrix=new three_module.Matrix4,_line=new three_module.Line3,_closestPoint=new three_module.Vector3,LineSegments2_box=new three_module.Box3,_sphere=new three_module.Sphere,_clipToWorldVector=new three_module.Vector4;let _ray,_instanceStart,_instanceEnd,_lineWidth;function getWorldSpaceHalfWidth(camera,distance,resolution){return _clipToWorldVector.set(0,0,-distance,1).applyMatrix4(camera.projectionMatrix),_clipToWorldVector.multiplyScalar(1/_clipToWorldVector.w),_clipToWorldVector.x=_lineWidth/resolution.width,_clipToWorldVector.y=_lineWidth/resolution.height,_clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse),_clipToWorldVector.multiplyScalar(1/_clipToWorldVector.w),Math.abs(Math.max(_clipToWorldVector.x,_clipToWorldVector.y))}class LineSegments2 extends three_module.Mesh{constructor(geometry=new LineSegmentsGeometry,material=new LineMaterial({color:16777215*Math.random()})){super(geometry,material),this.isLineSegments2=!0,this.type="LineSegments2"}computeLineDistances(){const geometry=this.geometry,instanceStart=geometry.attributes.instanceStart,instanceEnd=geometry.attributes.instanceEnd,lineDistances=new Float32Array(2*instanceStart.count);for(let i=0,j=0,l=instanceStart.count;i<l;i++,j+=2)_start.fromBufferAttribute(instanceStart,i),_end.fromBufferAttribute(instanceEnd,i),lineDistances[j]=0===j?0:lineDistances[j-1],lineDistances[j+1]=lineDistances[j]+_start.distanceTo(_end);const instanceDistanceBuffer=new three_module.InstancedInterleavedBuffer(lineDistances,2,1);return geometry.setAttribute("instanceDistanceStart",new three_module.InterleavedBufferAttribute(instanceDistanceBuffer,1,0)),geometry.setAttribute("instanceDistanceEnd",new three_module.InterleavedBufferAttribute(instanceDistanceBuffer,1,1)),this}raycast(raycaster,intersects){const worldUnits=this.material.worldUnits,camera=raycaster.camera;null!==camera||worldUnits||console.error('LineSegments2: "Raycaster.camera" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.');const threshold=void 0!==raycaster.params.Line2&&raycaster.params.Line2.threshold||0;_ray=raycaster.ray;const matrixWorld=this.matrixWorld,geometry=this.geometry,material=this.material;let sphereMargin,boxMargin;if(_lineWidth=material.linewidth+threshold,_instanceStart=geometry.attributes.instanceStart,_instanceEnd=geometry.attributes.instanceEnd,null===geometry.boundingSphere&&geometry.computeBoundingSphere(),_sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld),worldUnits)sphereMargin=.5*_lineWidth;else{sphereMargin=getWorldSpaceHalfWidth(camera,Math.max(camera.near,_sphere.distanceToPoint(_ray.origin)),material.resolution)}if(_sphere.radius+=sphereMargin,!1!==_ray.intersectsSphere(_sphere)){if(null===geometry.boundingBox&&geometry.computeBoundingBox(),LineSegments2_box.copy(geometry.boundingBox).applyMatrix4(matrixWorld),worldUnits)boxMargin=.5*_lineWidth;else{boxMargin=getWorldSpaceHalfWidth(camera,Math.max(camera.near,LineSegments2_box.distanceToPoint(_ray.origin)),material.resolution)}LineSegments2_box.expandByScalar(boxMargin),!1!==_ray.intersectsBox(LineSegments2_box)&&(worldUnits?function raycastWorldUnits(lineSegments,intersects){for(let i=0,l=_instanceStart.count;i<l;i++){_line.start.fromBufferAttribute(_instanceStart,i),_line.end.fromBufferAttribute(_instanceEnd,i);const pointOnLine=new three_module.Vector3,point=new three_module.Vector3;_ray.distanceSqToSegment(_line.start,_line.end,point,pointOnLine),point.distanceTo(pointOnLine)<.5*_lineWidth&&intersects.push({point,pointOnLine,distance:_ray.origin.distanceTo(point),object:lineSegments,face:null,faceIndex:i,uv:null,uv2:null})}}(this,intersects):function raycastScreenSpace(lineSegments,camera,intersects){const projectionMatrix=camera.projectionMatrix,resolution=lineSegments.material.resolution,matrixWorld=lineSegments.matrixWorld,geometry=lineSegments.geometry,instanceStart=geometry.attributes.instanceStart,instanceEnd=geometry.attributes.instanceEnd,near=-camera.near;_ray.at(1,_ssOrigin),_ssOrigin.w=1,_ssOrigin.applyMatrix4(camera.matrixWorldInverse),_ssOrigin.applyMatrix4(projectionMatrix),_ssOrigin.multiplyScalar(1/_ssOrigin.w),_ssOrigin.x*=resolution.x/2,_ssOrigin.y*=resolution.y/2,_ssOrigin.z=0,_ssOrigin3.copy(_ssOrigin),_mvMatrix.multiplyMatrices(camera.matrixWorldInverse,matrixWorld);for(let i=0,l=instanceStart.count;i<l;i++){if(_start4.fromBufferAttribute(instanceStart,i),_end4.fromBufferAttribute(instanceEnd,i),_start4.w=1,_end4.w=1,_start4.applyMatrix4(_mvMatrix),_end4.applyMatrix4(_mvMatrix),_start4.z>near&&_end4.z>near)continue;if(_start4.z>near){const deltaDist=_start4.z-_end4.z,t=(_start4.z-near)/deltaDist;_start4.lerp(_end4,t)}else if(_end4.z>near){const deltaDist=_end4.z-_start4.z,t=(_end4.z-near)/deltaDist;_end4.lerp(_start4,t)}_start4.applyMatrix4(projectionMatrix),_end4.applyMatrix4(projectionMatrix),_start4.multiplyScalar(1/_start4.w),_end4.multiplyScalar(1/_end4.w),_start4.x*=resolution.x/2,_start4.y*=resolution.y/2,_end4.x*=resolution.x/2,_end4.y*=resolution.y/2,_line.start.copy(_start4),_line.start.z=0,_line.end.copy(_end4),_line.end.z=0;const param=_line.closestPointToPointParameter(_ssOrigin3,!0);_line.at(param,_closestPoint);const zPos=three_module.MathUtils.lerp(_start4.z,_end4.z,param),isInClipSpace=zPos>=-1&&zPos<=1,isInside=_ssOrigin3.distanceTo(_closestPoint)<.5*_lineWidth;if(isInClipSpace&&isInside){_line.start.fromBufferAttribute(instanceStart,i),_line.end.fromBufferAttribute(instanceEnd,i),_line.start.applyMatrix4(matrixWorld),_line.end.applyMatrix4(matrixWorld);const pointOnLine=new three_module.Vector3,point=new three_module.Vector3;_ray.distanceSqToSegment(_line.start,_line.end,point,pointOnLine),intersects.push({point,pointOnLine,distance:_ray.origin.distanceTo(point),object:lineSegments,face:null,faceIndex:i,uv:null,uv2:null})}}}(this,camera,intersects))}}}class LineGeometry extends LineSegmentsGeometry{constructor(){super(),this.isLineGeometry=!0,this.type="LineGeometry"}setPositions(array){const length=array.length-3,points=new Float32Array(2*length);for(let i=0;i<length;i+=3)points[2*i]=array[i],points[2*i+1]=array[i+1],points[2*i+2]=array[i+2],points[2*i+3]=array[i+3],points[2*i+4]=array[i+4],points[2*i+5]=array[i+5];return super.setPositions(points),this}setColors(array,itemSize=3){const length=array.length-itemSize,colors=new Float32Array(2*length);if(3===itemSize)for(let i=0;i<length;i+=itemSize)colors[2*i]=array[i],colors[2*i+1]=array[i+1],colors[2*i+2]=array[i+2],colors[2*i+3]=array[i+3],colors[2*i+4]=array[i+4],colors[2*i+5]=array[i+5];else for(let i=0;i<length;i+=itemSize)colors[2*i]=array[i],colors[2*i+1]=array[i+1],colors[2*i+2]=array[i+2],colors[2*i+3]=array[i+3],colors[2*i+4]=array[i+4],colors[2*i+5]=array[i+5],colors[2*i+6]=array[i+6],colors[2*i+7]=array[i+7];return super.setColors(colors,itemSize),this}fromLine(line){const geometry=line.geometry;return this.setPositions(geometry.attributes.position.array),this}}class Line2 extends LineSegments2{constructor(geometry=new LineGeometry,material=new LineMaterial({color:16777215*Math.random()})){super(geometry,material),this.isLine2=!0,this.type="Line2"}}const Line=react.forwardRef((function Line({points,color=16777215,vertexColors,linewidth,lineWidth,segments,dashed,...rest},ref){var _vertexColors$,_ref;const size=(0,index_76c68185_esm.z)((state=>state.size)),line2=react.useMemo((()=>segments?new LineSegments2:new Line2),[segments]),[lineMaterial]=react.useState((()=>new LineMaterial)),itemSize=4===(null==vertexColors||null==(_vertexColors$=vertexColors[0])?void 0:_vertexColors$.length)?4:3,lineGeom=react.useMemo((()=>{const geom=segments?new LineSegmentsGeometry:new LineGeometry,pValues=points.map((p=>{const isArray=Array.isArray(p);return p instanceof three_module.Vector3||p instanceof three_module.Vector4?[p.x,p.y,p.z]:p instanceof three_module.Vector2?[p.x,p.y,0]:isArray&&3===p.length?[p[0],p[1],p[2]]:isArray&&2===p.length?[p[0],p[1],0]:p}));if(geom.setPositions(pValues.flat()),vertexColors){color=16777215;const cValues=vertexColors.map((c=>c instanceof three_module.Color?c.toArray():c));geom.setColors(cValues.flat(),itemSize)}return geom}),[points,segments,vertexColors,itemSize]);return react.useLayoutEffect((()=>{line2.computeLineDistances()}),[points,line2]),react.useLayoutEffect((()=>{dashed?lineMaterial.defines.USE_DASH="":delete lineMaterial.defines.USE_DASH,lineMaterial.needsUpdate=!0}),[dashed,lineMaterial]),react.useEffect((()=>()=>lineGeom.dispose()),[lineGeom]),react.createElement("primitive",(0,esm_extends.A)({object:line2,ref},rest),react.createElement("primitive",{object:lineGeom,attach:"geometry"}),react.createElement("primitive",(0,esm_extends.A)({object:lineMaterial,attach:"material",color,vertexColors:Boolean(vertexColors),resolution:[size.width,size.height],linewidth:null!==(_ref=null!=linewidth?linewidth:lineWidth)&&void 0!==_ref?_ref:1,dashed,transparent:4===itemSize},rest)))})),v=new three_module.Vector3,QuadraticBezierLine=react.forwardRef((function QuadraticBezierLine({start=[0,0,0],end=[0,0,0],mid,segments=20,...rest},forwardref){const ref=react.useRef(null);react.useImperativeHandle(forwardref,(()=>ref.current));const[curve]=react.useState((()=>new three_module.QuadraticBezierCurve3(void 0,void 0,void 0))),getPoints=react.useCallback(((start,end,mid,segments=20)=>(start instanceof three_module.Vector3?curve.v0.copy(start):curve.v0.set(...start),end instanceof three_module.Vector3?curve.v2.copy(end):curve.v2.set(...end),mid instanceof three_module.Vector3?curve.v1.copy(mid):Array.isArray(mid)?curve.v1.set(...mid):curve.v1.copy(curve.v0.clone().add(curve.v2.clone().sub(curve.v0)).add(v.set(0,curve.v0.y-curve.v2.y,0))),curve.getPoints(segments))),[]);react.useLayoutEffect((()=>{ref.current.setPoints=(start,end,mid)=>{const points=getPoints(start,end,mid);ref.current.geometry&&ref.current.geometry.setPositions(points.map((p=>p.toArray())).flat())}}),[]);const points=react.useMemo((()=>getPoints(start,end,mid,segments)),[start,end,mid,segments]);return react.createElement(Line,(0,esm_extends.A)({ref,points},rest))}))}}]);